##########################################################################
# Makefile for the 'Compilerbau' lecture
##########################################################################

## Run 'make' or 'make help' to display commonly used targets. Targets for
## individual files also exist but should only be used if you know what
## you are doing.

## NOTE:
## The pdf slides that can be generated for certain chapters are named by
## taking the relative path of the respective source file and replacing
## any '/' with an '_' (e.g. A/B/C -> A_B_C). This must be reversable in
## order to find the prerequisites for each output file. Therefore, any
## subdirectory of the $(SRC_DIR) directory must NOT contain an '_'.

#-------------------------------------------------------------------------
# Tools
#-------------------------------------------------------------------------
## Define tools to process various types of source files. By default, a
## custom Docker image will be used. To create this image, run:
## make create-docker-image
##
## Launching tools via a Docker container: make TARGET
## Launch the tools directly:              export DOCKER=false; make TARGET
##
## Note: LaTeX needs to be called in the folder of the .tex file to
## be processed. In the rule that generates images from tex files, the
## variable "$<" is set to the current .tex file (incl. path in the working
## directory). Therefore, the working directory for the Docker container is
## set to the folder of the current .tex file. When called directly, we
## need to first change-dir to this folder.
ifneq ($(DOCKER), false)
PANDOC = docker run --rm -i -v "$(shell pwd):/data" -w "/data"          -u "$(shell id -u):$(shell id -g)" --entrypoint="pandoc" alpine-pandoc-hugo
HUGO   = docker run --rm -i -v "$(shell pwd):/data" -w "/data"          -u "$(shell id -u):$(shell id -g)" --entrypoint="hugo"   alpine-pandoc-hugo
DOT    = docker run --rm -i -v "$(shell pwd):/data" -w "/data"          -u "$(shell id -u):$(shell id -g)" --entrypoint="dot"    alpine-pandoc-hugo
LATEX  = docker run --rm -i -v "$(dir $(realpath $<)):/data" -w "/data" -u "$(shell id -u):$(shell id -g)" --entrypoint="latex"  alpine-pandoc-hugo
else
PANDOC = pandoc
HUGO   = hugo
LATEX  = cd $(dir $<) && latex
DOT    = cd $(dir $<) && dot
endif

## Data-Dir: Path to the Git submodule of Pandoc-Lecture
## Resource-Path: Where to search for bib files and other resources?
##
## Note: If Pandoc is used via a Docker container, DATADIR must be the
## working directory or a subdirectory, as the working directory will
## be mounted into the Docker container! References to a parent directory
## of the working directory therefore will not work when using a Docker
## container!
PANDOC_DIRS = --data-dir=pandoc --resource-path=".:pandoc"

## Define options for generating images from ".tex" files
LATEX_ARGS = -shell-escape

## Define options for generating images from ".dot" files
DOT_ARGS = -Tpng

## Define options to be used by Hugo
## local.yaml allows to override settings in config.yaml
HUGO_ARGS = --config config.yaml,$(wildcard local.yaml)

#-------------------------------------------------------------------------
# I/O Directories
#-------------------------------------------------------------------------

## Top level directory for source files
SRC_DIR = markdown

## Top level directory for intermediate web files (input for Hugo)
WEB_INTERMEDIATE_DIR = content

## Output directory generated by Hugo
WEB_OUTPUT_DIR = docs

## Directory for generated PDF files
SLIDES_OUTPUT_DIR = pdf

#-------------------------------------------------------------------------
# Helper lists
#-------------------------------------------------------------------------

## TeX source and target files
TEX_SOURCES        = $(shell find $(SRC_DIR) -type f -iname '*.tex')
WEB_TEX_TARGETS    = $(patsubst $(SRC_DIR)/%.tex,$(WEB_INTERMEDIATE_DIR)/%.png, $(TEX_SOURCES))
SLIDES_TEX_TARGETS = $(TEX_SOURCES:.tex=.png)

## Dot source and target files
DOT_SOURCES        = $(shell find $(SRC_DIR) -type f -iname '*.dot')
WEB_DOT_TARGETS    = $(patsubst $(SRC_DIR)/%.dot,$(WEB_INTERMEDIATE_DIR)/%.png, $(DOT_SOURCES))
SLIDES_DOT_TARGETS = $(DOT_SOURCES:.dot=.png)

## Standalone image files
## Note: The list of standalone image files is defined in a somewhat
## roundabout way in case there are image files present that have been
## generated from tex or dot source files.
## 	1. Find all existing png-files
## 	2. filter out files that have been generated from tex or dot files
##	(the simple expansion with ':=' is important here because we use the
##	same variable on both sides. Using a recursive expansion with '='
##	would result in an error.)
STANDALONE_SOURCES  = $(shell find $(SRC_DIR) -type f -iname '*.png')
STANDALONE_SOURCES := $(filter-out $(TEX_SOURCES:.tex=.png) $(DOT_SOURCES:.dot=.png), $(STANDALONE_SOURCES))
WEB_STANDALONE_TARGETS     = $(STANDALONE_SOURCES:$(SRC_DIR)%=$(WEB_INTERMEDIATE_DIR)%)
SLIDES_STANDALONE_TARGETS  = $(STANDALONE_SOURCES)

## Image targets for web and slides
WEB_IMAGE_TARGETS    = $(WEB_TEX_TARGETS) $(WEB_DOT_TARGETS) $(WEB_STANDALONE_TARGETS)
SLIDES_IMAGE_TARGETS = $(SLIDES_TEX_TARGETS) $(SLIDES_DOT_TARGETS) $(SLIDES_STANDALONE_TARGETS)

## Markdown source and target files
WEB_MARKDOWN_SOURCES = $(shell find $(SRC_DIR) -type f -iname '*.md')
WEB_MARKDOWN_TARGETS = $(WEB_MARKDOWN_SOURCES:$(SRC_DIR)%=$(WEB_INTERMEDIATE_DIR)%)

## Source and target files for slides
## NOTE: The name for the target pdf file is generated from the relative
## path under $(SRC_DIR) with '/' substituted by '_'. Directories containing
## a .noslides file will not be considerd for slides generation.
SLIDES_EXCLUDE_DIRS     = $(dir $(shell find $(SRC_DIR) -type f -iname '.noslides'))
SLIDES_MARKDOWN_SOURCES = $(filter-out $(addsuffix %, $(SLIDES_EXCLUDE_DIRS)), $(shell find $(SRC_DIR) -type f -iname 'index.md'))
SLIDES_PDF_TARGETS      = $(addprefix $(SLIDES_OUTPUT_DIR)/,$(subst /,_, $(patsubst $(SRC_DIR)/%/index.md,%.pdf, $(SLIDES_MARKDOWN_SOURCES))))

## Readings data template
READINGS = data/readings.yaml
BIBTEX   = cb.bib

#-------------------------------------------------------------------------
# Phony Targets
#-------------------------------------------------------------------------

.DEFAULT_GOAL:=help

##@ Helpers

## Display help
.PHONY: help
help:  ## Display this help
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m\033[0m\n"} /^[a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ Building

## Make everything
.PHONY: all
all: slides web ## Make everything

## Create all slides
.PHONY: slides
slides: $(SLIDES_PDF_TARGETS) ## Create all slides

## Create website
.PHONY: web
web: $(WEB_MARKDOWN_TARGETS) $(WEB_IMAGE_TARGETS) $(READINGS) ## Create website
	$(HUGO) $(HUGO_ARGS)

## Build Docker image "alpine-pandoc-hugo"
.PHONY: docker
docker: ## Build Docker image "alpine-pandoc-hugo"
	cd .github/actions/alpine-pandoc-hugo && make clean all

##@ Cleanup

## Clean up
.PHONY: clean
clean: latex-clean ## Clean up all generated files and directories
	rm -rf $(WEB_INTERMEDIATE_DIR) $(SLIDES_OUTPUT_DIR) $(WEB_OUTPUT_DIR) $(SLIDES_TEX_TARGETS) $(SLIDES_DOT_TARGETS) $(READINGS)

## Clean up intermediate files generated by LaTeX
.PHONY: latex-clean
latex-clean: ## Clean up intermediate files generated by LaTeX
	rm -f $(shell find $(SRC_DIR) -type f \( -iname "*.aux" -o -iname "*.dvi" -o -iname "*.log" -o -iname "*.ps" \))

##@ New Elements

## Create new lecture stub based on archetype
## Use all sections and the page name, but leave out "content/" and "index.md".
## Example: "markdown/topic/subtopic/lecture/index.md" becomes "topic/subtopic/lecture"
## 1. "make new_chapter TOPIC=topic"
## 2. "make new_chapter TOPIC=topic/subtopic"
## 3. "make new_lecture-bc TOPIC=topic/subtopic/lecture"
TOPIC ?=

PHONY: new_chapter
new_chapter: ## Create new chapter
	$(HUGO) new -c "$(ORIG_CONTENT)/" -k chapter $(TOPIC)

PHONY: new_lecture-bc
new_lecture-bc: ## Create new lecture for BC
	$(HUGO) new -c "$(ORIG_CONTENT)/" -k lecture-bc $(TOPIC)

PHONY: new_lecture-cg
new_lecture-cg: ## Create new lecture for Carsten
	$(HUGO) new -c "$(ORIG_CONTENT)/" -k lecture-cg $(TOPIC)

PHONY: new_assignment
new_assignment: ## Create new assignment
	$(HUGO) new -c "$(ORIG_CONTENT)/" -k assignment $(TOPIC)

#-------------------------------------------------------------------------
# File Targets
#-------------------------------------------------------------------------

## Create readings data template
$(READINGS): $(BIBTEX)
	$(PANDOC) -s -f biblatex -t markdown $< -o $@

## Create images from tex files
$(SLIDES_TEX_TARGETS): %.png: %.tex
	$(LATEX) $(LATEX_ARGS) $(notdir $<)

## Create images from dot files
$(SLIDES_DOT_TARGETS): %.png: %.dot
	$(DOT) $(DOT_ARGS) $< -o $@

## Nothing to do for standalone images but we need the targets in order to
## use them as prerequisites. This way make can rebuild dependent targets
## if the files are manually changed or replaced.
$(SLIDES_STANDALONE_TARGETS): ;

## Copy image files to $(WEB_INTERMEDIATE_DIR)
$(WEB_IMAGE_TARGETS): $(WEB_INTERMEDIATE_DIR)/%: $(SRC_DIR)/%
	mkdir -p $(dir $@)
	cp $< $@

## Process markdown with pandoc (preprocessing for hugo)
$(WEB_MARKDOWN_TARGETS): $(WEB_INTERMEDIATE_DIR)/%: $(SRC_DIR)/%
	mkdir -p $(dir $@)
	$(PANDOC) $(PANDOC_DIRS) -d hugo $< -o $@

## Enable secondary expansion for subsequent targets. This allows the use
## of automatic variables like '$@' in the prerequisite definitions.
.SECONDEXPANSION:

## Generate pdf slides
## Prerequisites are the lessons 'index.md' and the images that may have to
## be created from source in the 'images' subfolder.
## NOTE: The prerequisites for the images must be added after the 'index.md'
## so that '$<' contains the right input file for pandoc.
$(SLIDES_PDF_TARGETS): $$(patsubst $(SLIDES_OUTPUT_DIR)/%.pdf,$(SRC_DIR)/%/index.md, $$(subst _,/,$$@))
	mkdir -p $(SLIDES_OUTPUT_DIR)
	$(PANDOC) $(PANDOC_DIRS) -d slides $< -o $@
$(SLIDES_PDF_TARGETS): $$(filter $$(patsubst $(SLIDES_OUTPUT_DIR)/%.pdf,$(SRC_DIR)/%, $$(subst _,/,$$@))%, $(SLIDES_IMAGE_TARGETS))
